  
#Python libraries that we need to import for our bot
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
import random
from flask import Flask, request, Response
from pymessenger.bot import Bot
from wit import Wit
import requests
import random
import pathlib
import os
from bs4 import BeautifulSoup
import urllib.request
import ssl
import json
import csv
import logging
from requests.exceptions import ConnectionError
app = Flask(__name__)
# ACCESS_TOKEN = 'ACCESS_TOKEN'
ACCESS_TOKEN = 'EAAIbv66Rh8wBAPIKp9fYSZCDO7KbJI19Ydjr33Q8MZBcclyDxZCyQKgAwqDb00qu01LfyUO1MuFtrhoQQr93yfjt177DaJkhZAZABBDxAP55T92nYVX963ZCMoOo1uqL6v6sUQmNBviX95rVwUcw7EFVSjshNkVxsCdDlOyp98wAQKc5IiMtDX'
VERIFY_TOKEN = 'VERIFY_TOKEN'
WIT_TOKEN    = '6OGZVMSELXTJM5HVSWH2IRBRRMLNGKGK'
bot = Bot(ACCESS_TOKEN)

#We will receive messages that Facebook sends our bot at this endpoint 
@app.route("/webhook", methods=['GET', 'POST'])
def receive_message():
    if request.method == 'GET':
        """Before allowing people to message your bot, Facebook has implemented a verify token
        that confirms all requests that your bot receives came from Facebook.""" 
        token_sent = request.args.get("hub.verify_token")
        return verify_fb_token(token_sent)
    #if the request was not get, it must be POST and we can just proceed with sending a message back to user
    else:
        """
        Handler for webhook (currently for postback and messages)
        """
        data = request.json
        if data['object'] == 'page':
            for entry in data['entry']:
                # get all the messages
                messages = entry['messaging']
                # print('message: ', messages)
                if messages[0]:
                    # Get the first message
                    message = messages[0]
                    # Yay! We got a new message!
                    # We retrieve the Facebook user ID of the sender
            
                    fb_id = message['sender']['id']
                    print('fb_id :', fb_id)
                    # We retrieve the message content
                    text = message['message']['text']
                    print('text:', text)
                    # Let's forward the message to Wit /message
                    # and customize our response to the message in handle_message
                    response = client.message(text)
                    # response ={'text': 'hello bot', 'intents': [{'id': '742387059668438', 'name': 'greating', 'confidence': 0.9787}], 'entities': {}, 'traits': {'wit$greetings': [{'id': '5900cc2d-41b7-45b2-b21f-b950d3ae3c5c', 'value': 'true', 'confidence': 0.9997}]}}
                    handle_message(response=response, fb_id=fb_id)
        else:

            return 'Received Different Event'
    return 'Message Processed!!!'


def verify_fb_token(token_sent):
    #take token sent by facebook and verify it matches the verify token you sent
    #if they match, allow the request, else return an error 
    if token_sent == VERIFY_TOKEN:
        return request.args.get("hub.challenge")
    return 'Invalid verification token'

def fb_message(sender_id, text):
    """
    Function for returning response to messenger
    """
    data = {
        'recipient': {'id': sender_id},
        'message': {'text': text}
    }
    # Setup the query string with your PAGE TOKEN
    qs = 'access_token=' + ACCESS_TOKEN
    # Send POST request to messenger
    resp = requests.post('https://graph.facebook.com/me/messages?' + qs,
                         json=data)
    return resp.content

# def first_trait_value(traits, trait):
#     """
#     Returns first trait value
#     """
#     if trait not in traits:
#         return None
#     val = traits[trait][0]['value']
#     if not val:
#         return None
#     return val
def first_entity_value(entities, entity):
    """
    Returns first trait value
    """
    if entity not in entities:
        return None
    val = entities[entity][0]['value']
    if not val:
        return None
    return val
    # return val['value'] if isinstance(val, dict) else val  

def handle_message(response, fb_id):
    """
    Customizes our response to the message and sends it
    """

    text = 'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω c·ªßa b·∫°n !'

    entities = response['entities']
    greetings = first_entity_value(entities, 'greetings:greetings')
    cuss=first_entity_value(entities, 'cuss:cuss')
    thanks=first_entity_value(entities, "thanks:thanks")
    bye = first_entity_value(entities, "bye:bye")
    good = first_entity_value(entities, "good:good")
    info_name = first_entity_value(entities, "info_name:info_name")
    info_age = first_entity_value(entities, "info_age:info_age")
    tutorial = first_entity_value( entities, "tutorial:tutorial")
    info_covid = first_entity_value( entities, "info_covid:info_covid")
    hotline = first_entity_value( entities, "hotline:hotline")
    symptom = first_entity_value(entities, "symptom:symptom")
    summary = first_entity_value(entities, "summary:summary")
    protect = first_entity_value( entities, "protect:protect")
    indentify = first_entity_value(entities, "indentify:indentify")
    sentiment = first_entity_value( entities, "sentiment:sentiment")
    if greetings:
        sample_responses = ["Ch√†o b·∫°n, t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n.",
                            "M√¨nh l√† tr·ª£ l√≠ ·∫£o Covid-19, m√¨nh gi√∫p g√¨ ƒë∆∞·ª£c cho b·∫°n",
                            "hello ",
                            "r·∫•t h√¢n h·∫°nh ƒë∆∞·ª£c l√†m quen v·ªõi b·∫°n",
                            "hi",
                            "xin ch√†o",
                            "C·ª© n√≥i ƒëi ƒë·ª´ng s·ª£"]
        
        text = random.choice(sample_responses)
    elif cuss:
        sample_responses = ["Sao l·∫°i ch·ª≠i m√¨nh!",
                            "B·∫°n n√≥i v·∫≠y m√¨nh ƒëau l√≤ng l·∫Øm!, b·∫°n c√≥ g√¨ mu·ªën h·ªèi n·ªØa kh√¥ng?",
                            "N√®, h∆°i m·∫•t d·∫°y ƒë·∫•y!C√≥ tin tui k√™u c√¥ng an b·∫Øt kh√¥ng"]
        text = random.choice(sample_responses)
    elif thanks:
        sample_responses = ['C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin v·ªõi m√¨nh, nh·ªõ h·ªèi thƒÉm m√¨nh th∆∞·ªùng xuy√™n nh√©!',
                            "C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu, nh·ªõ gh√© thƒÉm m√¨nh nh√©.",
                            "B·∫°n c√≥ bi·∫øt m√¨nh dui l·∫Øm kh√¥ng?",
                            "D√π bi·∫øt ch·∫Øc l√† n√≥i d·ªëi nh∆∞ng v·∫´n c·∫£m ∆°n",
                            "Thanks"]
        text = random.choice(sample_responses)
    elif bye:
        sample_responses = ['Bye b·∫°n, ch√∫c b·∫°n 1 ng√†y vui v·∫ª',
                            'Bye, ch·∫Øc b·∫°n s·∫Ω kh√¥ng quay l·∫°i n·ªØa ƒë√¢u!',
                            'Bye',
                            'ƒê·ª´ng ƒëi m√† !!'
                            'T·∫°m bi·ªát nh√©']
        text = random.choice(sample_responses)
    elif good:
        sample_responses = ['B·∫°n qu√° khen',
                            'Khen v·ª´a th√¥i, c√≥ bi·∫øt ng∆∞·ªùi ta vui l·∫Øm kh√¥ng',
                            'Chuy·ªán b√¨nh th∆∞·ªùng m√†',
                            'ƒê∆°n gi·∫£n v√¨ t√¥i c√≥ √¥ng ch·ªß gi·ªèi']
        text = random.choice(sample_responses)
    elif info_name:
        text = 'Em t√™n b√© B√¥ ·∫°!'
    elif info_age:
        text = 'D·∫° em nƒÉm nay v·ª´a tr√≤n 1 tu·ªïi'
    elif info_covid:
        sample_responses = ['Vi r√∫t Corona l√† m·ªôt h·ªç vi r√∫t l·ªõn ƒë∆∞·ª£c t√¨m th·∫•y ·ªü c·∫£ ƒë·ªông v·∫≠t v√† ng∆∞·ªùi. M·ªôt s·ªë vi r√∫t c√≥ th·ªÉ g√¢y b·ªánh cho ng∆∞·ªùi t·ª´ c·∫£m l·∫°nh th√¥ng th∆∞·ªùng ƒë·∫øn c√°c b·ªánh nghi√™m tr·ªçng h∆°n nh∆∞ H·ªôi ch·ª©ng h√¥ h·∫•p Trung ƒê√¥ng (MERS) v√† H·ªôi ch·ª©ng h√¥ h·∫•p c·∫•p t√≠nh n·∫∑ng (SARS).',
                            'Vi r√∫t Corona m·ªõi l√† m·ªôt ch·ªßng m·ªõi c·ªßa vi r√∫t Corona ch∆∞a t·ª´ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ·ªü ng∆∞·ªùi tr∆∞·ªõc ƒë√¢y. Vi r√∫t m·ªõi n√†y hi·ªán g·ªçi l√† 2019-nCoV, ch∆∞a t·ª´ng ƒë∆∞·ª£c ph√°t hi·ªán tr∆∞·ªõc khi d·ªãch b·ªánh ƒë∆∞·ª£c b√°o c√°o t·∫°i V≈© H√°n, Trung Qu·ªëc v√†o th√°ng 12 nƒÉm 2019. ƒê√¢y l√† m·ªôt lo·∫°i vi r√∫t ƒë∆∞·ªùng h√¥ h·∫•p m·ªõi g√¢y b·ªánh vi√™m ƒë∆∞·ªùng h√¥ h·∫•p c·∫•p ·ªü ng∆∞·ªùi v√† cho th·∫•y c√≥ s·ª± l√¢y lan t·ª´ ng∆∞·ªùi sang ng∆∞·ªùi. Vi r√∫t m·ªõi n√†y c√πng h·ªç v·ªõi vi r√∫t g√¢y H·ªôi ch·ª©ng h√¥ h·∫•p c·∫•p t√≠nh n·∫∑ng (SARS-CoV) nh∆∞ng kh√¥ng ph·∫£i l√† c√πng m·ªôt vi r√∫t.']
        text = random.choice(sample_responses)
    elif sentiment:
        text = " B·∫°n n√™n li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† h·ªó tr·ª£ k·ªãp th·ªùi nh·∫•t (19009095 / 19003228)"
    elif tutorial:
        text = get_tutorial()
    elif summary:
        text = get_summary()
    elif hotline:
        text  = get_hotline()
    elif symptom:
        text  = get_symptom()
    elif protect:
        text  = get_protect()
    elif indentify:
        text  = get_indentify()
    # else:

    #     text = "We've received your message: " + response['text']

    # send message
    fb_message(fb_id, text)

def get_summary():
    all_of_it=""
    try:
        # all_of_it = 'https://suckhoetoandan.vn/'
        url = 'https://suckhoetoandan.vn/'
        page = requests.get(url, verify=False)
        soup = BeautifulSoup(page.text, 'html.parser')

        main_row = soup.find_all("div",class_ ="box-heading")[1:]
        # print(main_row)
        all_of_it += "üõë S·ªê LI·ªÜU ƒê·∫æN HI·ªÜN T·∫†I:\n"
        all_of_it += "üåê To√†n c·∫ßu:\n"

        number = main_row[0].find_all("span",class_ = "box-total")
        all_of_it += "S·ªë ng∆∞·ªùi b·ªã nhi·ªÖm: " + number[0].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi t·ª≠ vong: " + number[2].text+ "\n"
        all_of_it += "S·ªë ng∆∞·ªùi b√¨nh ph·ª•c: " + number[4].text+ "\n"

        all_of_it += "üáªüá≥ Vi·ªát Nam:\n"

        number = main_row[0].find_all("span", class_="box-total")
        all_of_it += "S·ªë ng∆∞·ªùi b·ªã nhi·ªÖm: " + number[1].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi t·ª≠ vong: " + number[3].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi b√¨nh ph·ª•c: " + number[5].text + "\n"

        all_of_it += "üõë S·ªê L∆Ø·ª¢NG TƒÇNG TRONG NG√ÄY:\n"
        all_of_it += "üåê To√†n c·∫ßu:\n"

        number = main_row[1].find_all("span", class_="box-total")
        all_of_it += "S·ªë ng∆∞·ªùi b·ªã nhi·ªÖm: " + number[0].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi t·ª≠ vong: " + number[2].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi b√¨nh ph·ª•c: " + number[4].text + "\n"

        all_of_it += "üáªüá≥ Vi·ªát Nam:\n"

        number = main_row[1].find_all("span", class_="box-total")
        all_of_it += "S·ªë ng∆∞·ªùi b·ªã nhi·ªÖm: " + number[1].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi t·ª≠ vong: " + number[3].text + "\n"
        all_of_it += "S·ªë ng∆∞·ªùi b√¨nh ph·ª•c: " + number[5].text + "\n"

        # print(all_of_it)
    except ConnectionError as e:
        all_of_it += 'error connect url'
    return all_of_it

def get_hotline():
    try:
        text = 'üõë Khi c·∫ßn t∆∞ v·∫•n h·ªó tr·ª£ ho·∫∑c kh√°m b·ªánh, b·∫°n c√≥ th·ªÉ li√™n h·ªá c√°c s·ªë ƒëi·ªán tho·∫°i d∆∞·ªõi ƒë√¢y:'+'\n'+\
                    'üî∏ B·ªánh vi·ªán B·∫°ch Mai: 0969.851.616'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi·ªát ƒë·ªõi Trung ∆∞∆°ng: 0969.241.616'+'\n'+\
                    'üî∏ B·ªánh vi·ªán E: 0912.168.887'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi trung ∆∞∆°ng: 0372.884.712'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Ph·ªïi trung ∆∞∆°ng: 0967.941.616'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Vi·ªát Nam - Th·ª•y ƒêi·ªÉn U√¥ng B√≠: 0966.681.313'+'\n'+\
                    'üî∏ B·ªánh vi·ªán ƒêa khoa trung ∆∞∆°ng Th√°i Nguy√™n: 0913.394.495'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Trung ∆∞∆°ng Hu·∫ø: 0965.301.212'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Ch·ª£ R·∫´y: 0969.871.010'+'\n'+\
                    'üî∏ B·ªánh vi·ªán ƒêa khoa trung ∆∞∆°ng C·∫ßn Th∆°: 0907.736.736'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Xanh P√¥n H√† N·ªôi: 0904.138.502'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Vinmec H√† N·ªôi: 0934.472.768'+'\n'+\
                    'üî∏ B·ªánh vi·ªán ƒê√† N·∫µng: 0903.583.881'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi·ªát ƒë·ªõi TP.HCM: 0967.341.010'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi ƒë·ªìng 1: 0913.117.965'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi ƒë·ªìng 2: 0798.429.841'+'\n'+\
                    'üî∏ B·ªánh vi·ªán ƒêa khoa t·ªânh ƒê·ªìng Nai: 0819.634.807'+'\n'+\
                    'üî∏ B·ªánh vi·ªán Nhi·ªát ƒë·ªõi Kh√°nh H√≤a: 0913.464.257'+'\n'+\
                    'üî∏ B·ªánh vi·ªán t·ªânh Kh√°nh H√≤a: 0965.371.515'+'\n'+\
                    'üî∏ B·ªánh vi·ªán t·ªânh Th√°i B√¨nh: 0989.506.515'+'\n'+\
                    'üî∏ B·ªánh vi·ªán t·ªânh L·∫°ng S∆°n: 0396.802.226.'
        return text
    except ConnectionError as e:
        return 'ƒê∆∞·ªùng d√¢y n√≥ng: 19009095 / 19003228'

def get_symptom():
    try:
        text = 'üõëTRI·ªÜU CH·ª®NG NHI·ªÑM CORONA QUA T·ª™NG NG√ÄY'+'\n'+\
                'üî∏Ng√†y 1 ~ Ng√†y 3'+'\n'+\
                    '‚ñ™ Tri·ªáu ch·ª©ng gi·ªëng b·ªánh c·∫£m'+'\n'+\
                    '‚ñ™ Vi√™m h·ªçng nh·∫π, h∆°i ƒëau'+'\n'+\
                    '‚ñ™ Kh√¥ng n√≥ng s·ªët. Kh√¥ng m·ªát m·ªèi. V·∫´n ƒÉn u·ªëng b√¨nh th∆∞·ªùng'+'\n'+\
                'üî∏Ng√†y 4'+'\n'+\
                    '‚ñ™ C·ªï h·ªçng ƒëau nh·∫π, ng∆∞·ªùi n√¥n nao.'+'\n'+\
                    '‚ñ™ B·∫Øt ƒë·∫ßu khan ti·∫øng.'+'\n'+\
                    '‚ñ™ Nhi·ªát ƒë·ªô c∆° th·ªÉ dao ƒë·ªông 36.5~ (tu·ª≥ ng∆∞·ªùi)'+'\n'+\
                    '‚ñ™ B·∫Øt ƒë·∫ßu ch√°n ƒÉn.'+'\n'+\
                    '‚ñ™ ƒêau ƒë·∫ßu nh·∫π'+'\n'+\
                    '‚ñ™ Ti√™u ch·∫£y nh·∫π'+'\n'+\
                'üî∏Ng√†y 5'+'\n'+\
                    '‚ñ™ ƒêau h·ªçng, khan ti·∫øng h∆°n'+'\n'+\
                    '‚ñ™ C∆° th·ªÉ n√≥ng nh·∫π. Nhi·ªát ƒë·ªô t·ª´ 36.5~36.7'+'\n'+\
                    '‚ñ™ Ng∆∞·ªùi m·ªát m·ªèi, c·∫£m th·∫•y ƒëau kh·ªõp x∆∞∆°ng'+'\n'+\
                    '** Giai ƒëo·∫°n n√†y kh√≥ nh·∫≠n ra l√† c·∫£m hay l√† nhi·ªÖm corona'+'\n'+\
                'üî∏Ng√†y 6'+'\n'+\
                    '‚ñ™ B·∫Øt ƒë·∫ßu s·ªët nh·∫π, kho·∫£ng 37'+'\n'+\
                    '‚ñ™ Ho c√≥ ƒë√†m ho·∫∑c ho khan'+'\n'+\
                    '‚ñ™ ƒêau h·ªçng khi ƒÉn, n√≥i hay nu·ªët n∆∞·ªõc b·ªçt'+'\n'+\
                    '‚ñ™ M·ªát m·ªèi, bu·ªìn n√¥n'+'\n'+\
                    '‚ñ™ Th·ªânh tho·∫£ng kh√≥ khƒÉn trong vi·ªác h√≠t th·ªü'+'\n'+\
                    '‚ñ™ L∆∞ng, ng√≥n tay ƒëau l√¢m r√¢m'+'\n'+\
                    '‚ñ™ Ti√™u ch·∫£y, c√≥ th·ªÉ n√¥n √≥i'+'\n'+\
                'üî∏Ng√†y 7'+'\n'+\
                    '‚ñ™ S·ªët cao h∆°n t·ª´ 37.4~37.8'+'\n'+\
                    '‚ñ™ Ho nhi·ªÅu h∆°n, ƒë√†m nhi·ªÅu h∆°n.'+'\n'+\
                    '‚ñ™ To√†n th√¢n ƒëau nh·ª©c. ƒê·∫ßu n·∫∑ng nh∆∞ ƒëeo ƒë√°'+'\n'+\
                    '‚ñ™ T·∫ßn su·∫•t kh√≥ th·ªü v·∫´n nh∆∞ c≈©.'+'\n'+\
                    '‚ñ™ Ti√™u ch·∫£y nh√¨u h∆°n'+'\n'+\
                    '‚ñ™ N√¥n √≥i'+'\n'+\
                'üî∏Ng√†y 8'+'\n'+\
                    '‚ñ™ S·ªët g·∫ßn m·ª©c 38 ho·∫∑c tr√™n 38'+'\n'+\
                    '‚ñ™ Kh√≥ th·ªü h∆°n, m·ªói khi h√≠t th·ªü c·∫£m th·∫•y n·∫∑ng l·ªìng ng·ª±c. H∆°i th·ªü kh√≤ kh√®'+'\n'+\
                    '‚ñ™ Ho li√™n t·ª•c, ƒë√†m nhi·ªÅu, t·∫Øt ti·∫øng'+'\n'+\
                    '‚ñ™ ƒê·∫ßu ƒëau, kh·ªõp x∆∞∆°ng ƒëau, l∆∞ng ƒëau...'+'\n'+\
                'üî∏Ng√†y 9'+'\n'+\
                    '‚ñ™ C√°c tri·ªáu ch·ª©ng kh√¥ng thay ƒë·ªïi m√† tr·ªü n√™n n·∫∑ng h∆°n.'+'\n'+\
                    '‚ñ™ S·ªët tƒÉng gi·∫£m l·ªôn x·ªôn'+'\n'+\
                    '‚ñ™ Ho kh√¥ng b·ªõt m√† n·∫∑ng h∆°n tr∆∞·ªõc.'+'\n'+\
                    '‚ñ™ D√π c·ªë g·∫Øng v·∫´n c·∫£m th·∫•y kh√≥ h√≠t th·ªü.'+'\n'+\
                    '** T·∫°i th·ªùi ƒëi·ªÉm n√†y, n√™n ƒëi x√©t nghi·ªám m√°u v√† ch·ª•p XQuang ph·ªïi ƒë·ªÉ ki·ªÉm tra'+'\n'+\
                'üõëCh√∫ √Ω:'+'\n'+\
                    '‚ñ™ Th√¥ng tin ƒë·ªÉ tham kh·∫£o.'+'\n'+\
                    '‚ñ™ Tri·ªáu ch·ª©ng thay ƒë·ªïi tu·ª≥ theo s·ª©c ƒë·ªÅ kh√°ng c·ªßa t·ª´ng ng∆∞·ªùi. Ai kho·∫ª th√¨ m·∫•t 10-14 ng√†y m·ªõi ph√°t hi·ªán. Ai kh√¥ng kho·∫ª th√¨ 4-5 ng√†y.'
        return text
    except ConnectionError as e:
        return 'Ho, nh·ª©c ƒë·∫ßu!!'
def get_tutorial():
    try:
        text =  'üì®Em chuy√™n h·ªï tr·ª£, cung c·∫•p th√¥ng tin'+'\n'+\
                'üì£ Di·ªÖn bi·∫øn m·ªõi nh·∫•t Covid t·∫°i VN v√† th·∫ø gi·ªõi'+'\n'+\
                'üò∞ Tri·ªáu ch·ª©ng COVID-19'+'\n'+\
                '‚úç Khai b√°o y t·∫ø'+'\n'+\
                'üìû ƒê∆∞·ªùng d√¢y n√≥ng'+'\n'+\
                'üáªüá≥T√¨nh h√¨nh c√°c t·ªânh th√†nh.'
        return text
    except ConnectionError as e:
        return 'T·ª± t√¨m hi·ªÉu ƒëi b·∫°n'
def get_protect():
    try:
        text =  'üõë R·ª≠a tay: th∆∞·ªùng xuy√™n b·∫±ng dung d·ªãch ch·ª©a c·ªìn, x√† ph√≤ng, n∆∞·ªõc'+'\n'+\
                'üõë Kh·ª≠ tr√πng b·ªÅ m·∫∑t'+'\n'+\
                'üõë Tr√°nh ƒëi l·∫°i n∆°i ƒë√¥ng ng∆∞·ªùi'+'\n'+\
                'üõë N·∫øu kh√¥ng kh·ªèe th√¨ ·ªü nh√† v√† li√™n h·ªá b√°c sƒ©'+'\n'+\
                'üõë C√†i ƒë·∫∑t ·ª©ng d·ª•ng Bluezone.'
        return text
    except ConnectionError as e:
        return 'T·ª± t√¨m hi·ªÉu ƒëi b·∫°n'

def get_indentify():
    try:
        url = 'https://tokhaiyte.vn/m/?page=Mobile.Declare.home'
        return url

    except ConnectionError as e:
        return 'L√™n m·∫°ng search ƒëi'
@app.route("/", methods=['GET', 'POST'])
def show():
    return 'show bot ngu qua!!!!!!!'

# Setup Wit Client
client = Wit(access_token=WIT_TOKEN)
# client.interactive()
# client.logger.setLevel(logging.WARNING)
resp = client.message('tin t·ª©c')
print('Yay, got Wit.ai response: ' + str(resp))
response = resp
entities = response['entities']
print('1111111111111',entities)
print('2222222222',entities['summary:summary'][0]['value'])

if __name__ == "__main__":
    app.run(debug= True)